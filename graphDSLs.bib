@article{Bilitchenko2011,
abstract = {BACKGROUND: Synthetic biological systems are currently created by an ad-hoc, iterative process of specification, design, and assembly. These systems would greatly benefit from a more formalized and rigorous specification of the desired system components as well as constraints on their composition. Therefore, the creation of robust and efficient design flows and tools is imperative. We present a human readable language (Eugene) that allows for the specification of synthetic biological designs based on biological parts, as well as provides a very expressive constraint system to drive the automatic creation of composite Parts (Devices) from a collection of individual Parts.$\backslash$n$\backslash$nRESULTS: We illustrate Eugene's capabilities in three different areas: Device specification, design space exploration, and assembly and simulation integration. These results highlight Eugene's ability to create combinatorial design spaces and prune these spaces for simulation or physical assembly. Eugene creates functional designs quickly and cost-effectively.$\backslash$n$\backslash$nCONCLUSIONS: Eugene is intended for forward engineering of DNA-based devices, and through its data types and execution semantics, reflects the desired abstraction hierarchy in synthetic biology. Eugene provides a powerful constraint system which can be used to drive the creation of new devices at runtime. It accomplishes all of this while being part of a larger tool chain which includes support for design, simulation, and physical device assembly.},
author = {Bilitchenko, Lesia and Liu, Adam and Cheung, Sherine and Weeding, Emma and Xia, Bing and Leguia, Mariana and Anderson, J. Christopher and Densmore, Douglas},
doi = {10.1371/journal.pone.0018882},
file = {::},
isbn = {1932-6203 (Electronic)$\backslash$n1932-6203 (Linking)},
issn = {19326203},
journal = {PLoS ONE},
number = {4},
pmid = {21559524},
title = {{Eugene - A domain specific language for specifying and constraining synthetic biological parts, devices, and systems}},
volume = {6},
year = {2011}
}
@article{Deursen2000,
abstract = {We survey the literature available on the topic of domain-specific languages as used for the construction and maintenance of software systems. We list a selection of 75 key publications in the area, and provide a summary for each of the papers. Moreover, we discuss terminology, risks and benefits, example domain-specific languages, design methodologies, and implementation techniques.},
author = {Deursen, Arie Van and Klint, Paul and Visser, Joost},
doi = {10.1145/352029.352035},
file = {::},
isbn = {0362-1340},
issn = {03621340},
journal = {ACM Sigplan Notices},
number = {6},
pages = {26--36},
title = {{Domain-specific languages: an annotated bibliography}},
url = {http://portal.acm.org/citation.cfm?doid=352029.352035},
volume = {35},
year = {2000}
}
@article{Hudak1998,
abstract = {When most people think of a programming language they think of a general purpose language: one capable of programming any application with relatively the same degree of expressiveness and efficiency. For many applications, however, there are more natural ways to express the solution to a problem than those afforded by general purpose programming languages. As a result, researchers and practitioners in recent years have developed many different domain specific languages, or DSL's, which are tailored to particular application domains. With an appropriate DSL, one can develop complete application programs for a domain more quickly and more effectively than with a general purpose language. Ideally, a well-designed DSL captures precisely the semantics of an application domain, no more and no less.},
archivePrefix = {arXiv},
arxivId = {arXiv:1011.1669v3},
author = {Hudak, Paul},
doi = {10.5120/37-640},
eprint = {arXiv:1011.1669v3},
file = {::},
isbn = {0321712943},
issn = {1557-170X},
journal = {Handbook of Programming Languages, Vol. III: Little Languages and Tools},
pages = {39--60},
pmid = {17270914},
title = {{Domain specific languages}},
url = {http://haskell.cs.yale.edu/wp-content/uploads/2011/01/DSEL-Little.pdf{\%}5Cnhttp://haskell.cs.yale.edu/?post{\_}type=publication{\&}p=126},
volume = {III},
year = {1998}
}
@article{Sedlmajer2012,
	title={GReg: a domain specific language for the modeling of genetic regulatory mechanisms},
	author={Sedlmajer, Nicolas and Buchs, Didier and Hostettler, Steve and Linard, Alban and Lopez, Edmundo and Marechal, Alexis},
	year={2012},
	publisher={Citeseer}
}
